剖析 go内存管理

# 划分

1，为了方便自主管理内存，做法便是先向系统申请一块内存，然后将内存切割成小块，通过一定的内存分配算法管理内存。 以64位系统为例，Golang程序启动时会向系统申请的内存如下图所示：

预申请的内存划分为spans、bitmap、arena三部分。其中arena即为所谓的堆区，应用中需要的内存从这里分配。其中spans和bitmap是为了管理arena区而存在的。

arena的大小为512G，为了方便管理把arena区域划分成一个个的page，每个page为8KB,一共有512GB/8KB个页；

spans区域存放span的指针，每个指针对应一个page，所以span区域的大小为(512GB/8KB)*指针大小8byte = 512M

bitmap区域大小也是通过arena计算出来，不过主要用于GC。

# 内存申请步骤

以申请size为n的内存为例，分配步骤如下： 1. 获取当前线程的私有缓存mcache 2. 跟据size计算出适合的class的ID 3. 从mcache的alloc[class]链表中查询可用的span 4. 如果mcache没有可用的span则从mcentral申请一个新的span加入mcache中 5. 如果mcentral中也没有可用的span则从mheap中申请一个新的span加入mcentral 6. 从该span中获取到空闲对象地址并返回

# 总结

Golang内存分配是个相当复杂的过程，其中还掺杂了GC的处理，这里仅仅对其关键数据结构进行了说明，了解其原理而又不至于深陷实现细节。

1. Golang程序启动时申请一大块内存，并划分成spans、bitmap、arena区域
2. arena区域按页划分成一个个小块
3. span管理一个或多个页
4. mcentral管理多个span供线程申请使用
5. mcache作为线程私有资源，资源来源于mcentral